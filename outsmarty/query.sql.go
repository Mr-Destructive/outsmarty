// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package outsmarty

import (
	"context"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO games (theme_id, num_rounds) VALUES (?, ?)
`

type CreateGameParams struct {
	ThemeID   int64
	NumRounds int64
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame, arg.ThemeID, arg.NumRounds)
	return err
}

const createPlayer = `-- name: CreatePlayer :exec
INSERT INTO players (name) VALUES (?)
`

func (q *Queries) CreatePlayer(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createPlayer, name)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, theme_id, num_rounds, current_round
FROM games
WHERE id = ?
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.ThemeID,
		&i.NumRounds,
		&i.CurrentRound,
	)
	return i, err
}

const getLastInsertGame = `-- name: GetLastInsertGame :one
SELECT id, theme_id, num_rounds, current_round FROM games WHERE id = last_insert_rowid()
`

func (q *Queries) GetLastInsertGame(ctx context.Context) (Game, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertGame)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.ThemeID,
		&i.NumRounds,
		&i.CurrentRound,
	)
	return i, err
}

const getLastInsertPlayer = `-- name: GetLastInsertPlayer :one
SELECT id, name FROM players WHERE id = last_insert_rowid()
`

func (q *Queries) GetLastInsertPlayer(ctx context.Context) (Player, error) {
	row := q.db.QueryRowContext(ctx, getLastInsertPlayer)
	var i Player
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
